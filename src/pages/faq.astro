---
export const prerender = true;

import Layout from "layouts/Layout.astro";
import { getSortedFaq } from "scripts/collections";

const faq = await getSortedFaq();

// this sucks, but it's the only way to generate the right data for structured data
// regardless, this only runs at prerender time so it's okay
const rawFaqData = await Astro.glob("../content/faq/*.md");
const structuredData = JSON.stringify({
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: rawFaqData.map(f => ({
        "@type": "Question",
        name: f.frontmatter.title,
        acceptedAnswer: {
            "@type": "Answer",
            text: f.compiledContent(),
        },
    })),
});
---

<Layout
    title="Frequently Asked Questions"
    description="Browse answers to frequently asked questions about Vencord"
>
    <h1 class="p-page-title">Frequently Asked Questions</h1>
    <p class="p-subtitle">Questions that we're asked often.</p>

    <div class="questions">
        {
            faq.map(async f => {
                const { Content } = await f.render();
                return (
                    <details>
                        <summary>{f.data.title}</summary>

                        <div class="faq-content">
                            <Content />
                        </div>
                    </details>
                );
            })
        }
    </div>

    <p>
        Still lost? Visit our <a href="/discord">support server</a> for more assistance!
        We're happy to help.
    </p>

    <script type="application/ld+json" set:html={structuredData}></script>
</Layout>

<style>
    h1 {
        color: var(--accentAqua);
    }

    .questions {
        display: flex;
        flex-direction: column;
        gap: 1em;
    }

    /* This is mostly copy pasted from https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#try_it */
    details {
        background-color: var(--bg3);
        padding: 0.5em 0.75em;
        border-radius: 8px;
        outline: 1px solid var(--bg5);
        animation: move-in 0.6s cubic-bezier(0.6, 0.6, 0.3, 1.3) both;
        animation-delay: 0.1s;
    }

    @media (prefers-reduced-motion) {
        details {
            animation: none;
        }
    }
    @keyframes move-in {
        0% {
            opacity: 0;
            transform: translateX(50px);
        }
        to {
            opacity: 1;
            transform: none;
        }
    }

    summary {
        font-weight: bold;
        cursor: pointer;
    }

    details[open] summary {
        margin-bottom: 8px;
    }

    .faq-content {
        background-color: var(--bgCurrentWord);
        color: var(--grey2);
        border-radius: 4px;
        padding: 0.75em;
    }

    details :global(p) {
        margin-top: 0;
    }

    details :global(*:last-child) {
        margin-bottom: 0;
    }

    /* style some markdown elements */

    .questions :global(code:not(pre > code)) {
        background-color: var(--bg1);
        border-radius: 5px;
        text-align: center;
        padding: 0 4px;
        margin: 0 2px;
    }

    .questions :global(.astro-code) {
        padding: 1em;
        background-color: var(--bg1) !important;
        border-radius: 6px;
    }
</style>
